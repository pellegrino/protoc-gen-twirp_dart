/////
// File automatically generated by protoc-gen-twirp_dart
// DO NOT EDIT
/////
import 'dart:convert';
import './model.pb.dart' as pb;

class Hat {
  Hat(
    this.size,
    this.color,
    this.name,
    this.createdOn,
    this.rgbColor,
    this.availableSizes,
    this.roles,
    this.dictionary,
    this.dictionaryWithMessage,
  );

  int size;
  String color;
  String name;
  DateTime createdOn;
  Color rgbColor;
  List<Size> availableSizes;
  List<int> roles;
  Map<String, int> dictionary;
  Map<String, Size> dictionaryWithMessage;

  pb.Hat toProto() {
    var pbHat = pb.Hat();
    pbHat.size = size;
    pbHat.color = color;
    pbHat.name = name;
    pbHat.createdOn = createdOn;
    pbHat.rgbColor = rgbColor.toProto();
    availableSizes?.forEach((l) => pbHat.availableSizes.add(l.toProto()));
    roles?.forEach((l) => pbHat.roles.add(l));

    pbHat.dictionary.addAll(dictionary as Map<String, Int64>);
    if (val is String) {
      dictionaryMap[key] = int.parse(val);
    } else if (val is num) {
      dictionaryMap[key] = val.toInt();
    }

    dictionaryWithMessageMap[key] =
        new Size.fromJson(val as Map<String, dynamic>);

    return pbHat;
  }

  factory Hat.fromProto(pb.Hat pbHat) {
    return new Hat(
      pbHat.size,
      pbHat.color,
      pbHat.name,
      pbHat.createdOn,
      pbHat.rgbColor,
      pbHat.availableSizes,
      pbHat.roles,
      pbHat.dictionary,
      pbHat.dictionaryWithMessage,
    );
  }

  factory Hat.fromProtobufBytes(List<int> byteValues) {
    var pbHat = pb.Hat.fromBuffer(byteValues);
    return Hat.fromProto(pbHat);
  }

  factory Hat.fromJson(Map<String, dynamic> json) {
    var dictionaryMap = new Map<String, int>();
    (json['dictionary'] as Map<String, dynamic>)?.forEach((key, val) {
      if (val is String) {
        dictionaryMap[key] = int.parse(val);
      } else if (val is num) {
        dictionaryMap[key] = val.toInt();
      }
    });

    var dictionaryWithMessageMap = new Map<String, Size>();
    (json['dictionaryWithMessage'] as Map<String, dynamic>)
        ?.forEach((key, val) {
      dictionaryWithMessageMap[key] =
          new Size.fromJson(val as Map<String, dynamic>);
    });

    return new Hat(
      json['size'] as int,
      json['color'] as String,
      json['name'] as String,
      DateTime.tryParse(json['created_on']),
      new Color.fromJson(json['rgbColor']),
      json['availableSizes'] != null
          ? (json['availableSizes'] as List)
              .map((d) => new Size.fromJson(d))
              .toList()
          : <Size>[],
      json['roles'] != null ? (json['roles'] as List).cast<int>() : <int>[],
      dictionaryMap,
      dictionaryWithMessageMap,
    );
  }

  Map<String, dynamic> toJson() {
    var map = new Map<String, dynamic>();
    map['size'] = size;
    map['color'] = color;
    map['name'] = name;
    map['created_on'] = createdOn.toIso8601String();
    map['rgbColor'] = rgbColor.toJson();
    map['availableSizes'] = availableSizes?.map((l) => l.toJson())?.toList();
    map['roles'] = roles?.map((l) => l)?.toList();
    map['dictionary'] = json.decode(json.encode(dictionary));
    map['dictionaryWithMessage'] =
        json.decode(json.encode(dictionaryWithMessage));
    return map;
  }

  @override
  String toString() {
    return json.encode(toJson());
  }
}

class Color {
  Color(
    this.red,
    this.green,
    this.blue,
  );

  int red;
  int green;
  int blue;

  pb.Color toProto() {
    var pbColor = pb.Color();
    pbColor.red = red;
    pbColor.green = green;
    pbColor.blue = blue;
    return pbColor;
  }

  factory Color.fromProto(pb.Color pbColor) {
    return new Color(
      pbColor.red,
      pbColor.green,
      pbColor.blue,
    );
  }

  factory Color.fromProtobufBytes(List<int> byteValues) {
    var pbColor = pb.Color.fromBuffer(byteValues);
    return Color.fromProto(pbColor);
  }

  factory Color.fromJson(Map<String, dynamic> json) {
    return new Color(
      json['red'] as int,
      json['green'] as int,
      json['blue'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    var map = new Map<String, dynamic>();
    map['red'] = red;
    map['green'] = green;
    map['blue'] = blue;
    return map;
  }

  @override
  String toString() {
    return json.encode(toJson());
  }
}

class Receipt {
  Receipt(
    this.total,
  );

  double total;

  pb.Receipt toProto() {
    var pbReceipt = pb.Receipt();
    pbReceipt.total = total;
    return pbReceipt;
  }

  factory Receipt.fromProto(pb.Receipt pbReceipt) {
    return new Receipt(
      pbReceipt.total,
    );
  }

  factory Receipt.fromProtobufBytes(List<int> byteValues) {
    var pbReceipt = pb.Receipt.fromBuffer(byteValues);
    return Receipt.fromProto(pbReceipt);
  }

  factory Receipt.fromJson(Map<String, dynamic> json) {
    return new Receipt(
      json['total'] as double,
    );
  }

  Map<String, dynamic> toJson() {
    var map = new Map<String, dynamic>();
    map['total'] = total;
    return map;
  }

  @override
  String toString() {
    return json.encode(toJson());
  }
}

class Size {
  Size(
    this.inches,
  );

  int inches;

  pb.Size toProto() {
    var pbSize = pb.Size();
    pbSize.inches = inches;
    return pbSize;
  }

  factory Size.fromProto(pb.Size pbSize) {
    return new Size(
      pbSize.inches,
    );
  }

  factory Size.fromProtobufBytes(List<int> byteValues) {
    var pbSize = pb.Size.fromBuffer(byteValues);
    return Size.fromProto(pbSize);
  }

  factory Size.fromJson(Map<String, dynamic> json) {
    return new Size(
      json['inches'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    var map = new Map<String, dynamic>();
    map['inches'] = inches;
    return map;
  }

  @override
  String toString() {
    return json.encode(toJson());
  }
}
